{"ast":null,"code":"import _classCallCheck from\"/Users/yingyingxiong/Desktop/groupproject/bigbrothers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yingyingxiong/Desktop/groupproject/bigbrothers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/yingyingxiong/Desktop/groupproject/bigbrothers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/yingyingxiong/Desktop/groupproject/bigbrothers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/yingyingxiong/Desktop/groupproject/bigbrothers/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";// import React from 'react';\n// import { Field, reduxForm } from 'redux-form';\n// class TicketCreateForm extends React.Component {\n//   renderError({ error, touched }) {\n//     if (touched && error) {\n//       return (\n//         <div className=\"ui error message\">\n//           <div className=\"header\">{error}</div>\n//         </div>\n//       );\n//     }\n//   }\n//   renderInput = ({ input, label, meta }) => {\n//     const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n//     return (\n//       <div className={className}>\n//         <label>{label}</label>\n//         <input {...input} autoComplete=\"off\" />\n//         {this.renderError(meta)}\n//       </div>\n//     );\n//   };\n//   onSubmit = formValues => {\n//     this.props.onSubmit(formValues);\n//   };\n//   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n//         <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n//         <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n//         <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n//         <Field name=\"status\" comonent={this.renderInput} label=\"Enter Status (open, in progress, qa, closed)\" />\n//         <Field name=\"urgent_level\" component={this.renderInput} label=\"Set Urgent Level (low, high, medium)\" />\n//         <Field name=\"budgeted_hours\" component={this.renderInput} label=\"Enter Budgeted Hours\" />\n//         <Field name=\"hours_spent\" component={this.renderInput} label=\"Enter Hours Spent\" />\n//         <Field name=\"project_name\" component={this.renderInput} label=\"Assign a Project\" />\n//         <Field\n//           name=\"create_date\"\n//           component={this.renderInput}\n//           label=\"Enter Create Date (Format: mm/dd/yy)\"\n//         />\n//         <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n//         <button className=\"ui button primary\">Submit</button>\n//       </form>\n//     );\n//   }\n// }\n// const validate = formValues => {\n//   const errors = {};\n//   if (!formValues.ticket_title) {\n//     errors.title = 'You must enter a title for the ticket';\n//   }\n//   if (!formValues.assigned_employee_name) {\n//     errors.description = 'You must assign an employee for this ticket';\n//   }\n//   if(formValues.status !== 'open') {\n//     if (formValues.status !== 'in progress') {\n//       if (formValues.status !== 'qa') {\n//         if (formValues.status !== 'closed') {\n//           errors.description = 'You must enter budgeted hours';\n//         }\n//       }\n//     }\n//   }\n//   if (!formValues.budgeted_hours) {\n//     errors.description = 'You must enter budgeted hours';\n//   }\n//   if (!formValues.create_date) {\n//     errors.description = 'You must enter a create date';\n//   }\n//   if (!formValues.due_date) {\n//     errors.description = 'You must enter a due date';\n//   }\n//   return errors;\n// };\n// export default reduxForm({\n//   form: 'ticketCreateForm',\n//   validate\n// })(TicketCreateForm);\nimport React from'react';import{Field,reduxForm}from'redux-form';import{Link}from\"react-router-dom\";import{Form}from\"semantic-ui-react\";var TicketCreateForm=/*#__PURE__*/function(_React$Component){_inherits(TicketCreateForm,_React$Component);function TicketCreateForm(){var _getPrototypeOf2;var _this;_classCallCheck(this,TicketCreateForm);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(TicketCreateForm)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.renderInput=function(_ref){var input=_ref.input,label=_ref.label,meta=_ref.meta;var className=\"field \".concat(meta.error&&meta.touched?'error':'');return React.createElement(\"div\",{className:className},React.createElement(\"label\",null,label),React.createElement(\"input\",Object.assign({},input,{autoComplete:\"off\"})),_this.renderError(meta));};_this.onSubmit=function(formValues){_this.props.onSubmit(formValues);};return _this;}_createClass(TicketCreateForm,[{key:\"renderError\",value:function renderError(_ref2){var error=_ref2.error,touched=_ref2.touched;if(touched&&error){return React.createElement(\"div\",{className:\"ui error message\"},React.createElement(\"div\",{className:\"header\"},error));}}},{key:\"renderCreate\",value:function renderCreate(){return React.createElement(\"div\",{style:{textAlign:'left'}},React.createElement(Link,{to:\"/tickets\",className:\"ui button secondary\"},\"Cancel\"));}},{key:\"render\",value:function render(){return React.createElement(\"form\",{onSubmit:this.props.handleSubmit(this.onSubmit),className:\"ui form error\"},React.createElement(Form.Group,{widths:\"equal\"},React.createElement(Field,{name:\"ticket_title\",component:this.renderInput,label:\"Enter Ticket Title\"}),React.createElement(Field,{name:\"assigned_employee_name\",component:this.renderInput,label:\"Assign to\"})),React.createElement(Form.Group,{widths:\"equal\"},React.createElement(Field,{name:\"budgeted_hours\",component:this.renderInput,label:\"Enter Budgeted Hours\"}),React.createElement(Field,{name:\"hours_spent\",component:this.renderInput,label:\"Enter Hours Spent\"})),React.createElement(Form.Group,{widths:\"equal\"},React.createElement(Field,{name:\"status\",component:this.renderInput,label:\"Enter Status (open, in progress, qa, closed)\"}),React.createElement(Field,{name:\"urgent_level\",component:this.renderInput,label:\"Set Urgent Level (low, high, medium)\"})),React.createElement(Form.Group,{widths:\"equal\"},React.createElement(Field,{name:\"create_date\",component:this.renderInput,label:\"Enter Create Date (Format: mm/dd/yy)\"}),React.createElement(Field,{name:\"due_date\",component:this.renderInput,label:\"Enter Due Date (Format: mm/dd/yy)\"})),React.createElement(Form.Group,{widths:\"equal\"},React.createElement(Field,{name:\"ticket_description\",component:this.renderInput,label:\"Enter Ticket Description\"}),React.createElement(Field,{name:\"project_name\",component:this.renderInput,label:\"Assign to a Project\"})),React.createElement(\"div\",{style:{display:\"flex\"}},React.createElement(\"button\",{className:\"ui button primary\"},\"Submit\"),this.renderCreate()));}}]);return TicketCreateForm;}(React.Component);var validate=function validate(formValues){var errors={};if(!formValues.ticket_title){errors.description='You must enter a ticket title';}if(!formValues.assigned_employee_name){errors.description='You must assign the ticket to one employee';}if(!formValues.due_date){errors.description='You must enter a due date';}if(!formValues.budgeted_hours){errors.description='You must enter Budget Hours';}return errors;};//   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n//           <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n//           <Field name=\"project_name\" component={this.renderInput} label=\"Assign Project\" />\n//         </Form.Group>\n//         <Form.Group widths='equal'>\n//           <Field\n//             name=\"create_date\"\n//             component={this.renderInput}\n//             label=\"Enter Create Date (Format: mm/dd/yy)\"\n//           />\n//           <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n//         </Form.Group>\n//         <Form.Group widths='equal'>\n//           <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n//           <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n//         </Form.Group>\n//         <div style={{ display: \"flex\" }}>\n//           <button className=\"ui button primary\">Submit</button>\n//           {this.renderCreate()}\n//         </div>\n//       </form>\n//     );\n//   }\n// }\nexport default reduxForm({form:'ticketForm',validate:validate})(TicketCreateForm);","map":{"version":3,"sources":["/Users/yingyingxiong/Desktop/groupproject/bigbrothers/src/bigbrothers/components/TicketCreateForm.js"],"names":["React","Field","reduxForm","Link","Form","TicketCreateForm","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","textAlign","handleSubmit","display","renderCreate","Component","validate","errors","ticket_title","description","assigned_employee_name","due_date","budgeted_hours","form"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import { Field, reduxForm } from 'redux-form';\n\n// class TicketCreateForm extends React.Component {\n//   renderError({ error, touched }) {\n//     if (touched && error) {\n//       return (\n//         <div className=\"ui error message\">\n//           <div className=\"header\">{error}</div>\n//         </div>\n//       );\n//     }\n//   }\n\n//   renderInput = ({ input, label, meta }) => {\n//     const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n//     return (\n//       <div className={className}>\n//         <label>{label}</label>\n//         <input {...input} autoComplete=\"off\" />\n//         {this.renderError(meta)}\n//       </div>\n//     );\n//   };\n\n//   onSubmit = formValues => {\n//     this.props.onSubmit(formValues);\n//   };\n\n//   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n//         <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n//         <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n//         <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n//         <Field name=\"status\" comonent={this.renderInput} label=\"Enter Status (open, in progress, qa, closed)\" />\n//         <Field name=\"urgent_level\" component={this.renderInput} label=\"Set Urgent Level (low, high, medium)\" />\n//         <Field name=\"budgeted_hours\" component={this.renderInput} label=\"Enter Budgeted Hours\" />\n//         <Field name=\"hours_spent\" component={this.renderInput} label=\"Enter Hours Spent\" />\n//         <Field name=\"project_name\" component={this.renderInput} label=\"Assign a Project\" />\n//         <Field\n//           name=\"create_date\"\n//           component={this.renderInput}\n//           label=\"Enter Create Date (Format: mm/dd/yy)\"\n//         />\n//         <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n//         <button className=\"ui button primary\">Submit</button>\n//       </form>\n//     );\n//   }\n// }\n\n// const validate = formValues => {\n//   const errors = {};\n\n//   if (!formValues.ticket_title) {\n//     errors.title = 'You must enter a title for the ticket';\n//   }\n\n//   if (!formValues.assigned_employee_name) {\n//     errors.description = 'You must assign an employee for this ticket';\n//   }\n\n//   if(formValues.status !== 'open') {\n//     if (formValues.status !== 'in progress') {\n//       if (formValues.status !== 'qa') {\n//         if (formValues.status !== 'closed') {\n//           errors.description = 'You must enter budgeted hours';\n//         }\n//       }\n//     }\n//   }\n\n//   if (!formValues.budgeted_hours) {\n//     errors.description = 'You must enter budgeted hours';\n//   }\n\n//   if (!formValues.create_date) {\n//     errors.description = 'You must enter a create date';\n//   }\n\n//   if (!formValues.due_date) {\n//     errors.description = 'You must enter a due date';\n//   }\n  \n//   return errors;\n// };\n\n// export default reduxForm({\n//   form: 'ticketCreateForm',\n//   validate\n// })(TicketCreateForm);\n\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from \"react-router-dom\";\nimport { Form } from \"semantic-ui-react\";\n\nclass TicketCreateForm extends React.Component {\n  renderError({ error, touched }) {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\"/>\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  renderCreate() {\n    return (\n      <div style={{ textAlign: 'left' }}>\n        <Link to=\"/tickets\" className=\"ui button secondary\">\n          Cancel\n        </Link>\n      </div>\n    )\n  }\n\n  onSubmit = formValues => {\n    this.props.onSubmit(formValues);\n  };\n  render() {\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"ui form error\"\n      >\n        <Form.Group widths='equal'>\n          <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n          <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n        </Form.Group>\n        <Form.Group widths='equal'>\n          <Field name=\"budgeted_hours\" component={this.renderInput} label=\"Enter Budgeted Hours\" />\n          <Field name=\"hours_spent\" component={this.renderInput} label=\"Enter Hours Spent\" />\n        </Form.Group>\n        <Form.Group widths='equal'>\n          <Field name=\"status\" component={this.renderInput} label=\"Enter Status (open, in progress, qa, closed)\" />\n          <Field name=\"urgent_level\" component={this.renderInput} label=\"Set Urgent Level (low, high, medium)\" />\n        </Form.Group>\n        <Form.Group widths='equal'>\n          <Field\n            name=\"create_date\"\n            component={this.renderInput}\n            label=\"Enter Create Date (Format: mm/dd/yy)\"\n          />\n          <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n        </Form.Group>\n        <Form.Group widths='equal'>\n          <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n          <Field name=\"project_name\" component={this.renderInput} label=\"Assign to a Project\" />\n        </Form.Group>\n        \n        <div style={{ display: \"flex\" }}>\n          <button className=\"ui button primary\">Submit</button>\n          {this.renderCreate()}\n        </div>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.ticket_title) {\n    errors.description = 'You must enter a ticket title';\n  }\n\n  if (!formValues.assigned_employee_name) {\n    errors.description = 'You must assign the ticket to one employee';\n  }\n\n  if (!formValues.due_date) {\n    errors.description = 'You must enter a due date';\n  }\n\n  if(!formValues.budgeted_hours) {\n    errors.description = 'You must enter Budget Hours';\n  }\n\n  return errors;\n};\n//   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n\n//           <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n//           <Field name=\"project_name\" component={this.renderInput} label=\"Assign Project\" />\n//         </Form.Group>\n\n//         <Form.Group widths='equal'>\n//           <Field\n//             name=\"create_date\"\n//             component={this.renderInput}\n//             label=\"Enter Create Date (Format: mm/dd/yy)\"\n//           />\n//           <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n//         </Form.Group>\n\n//         <Form.Group widths='equal'>\n//           <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n//           <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n//         </Form.Group>\n//         <div style={{ display: \"flex\" }}>\n//           <button className=\"ui button primary\">Submit</button>\n//           {this.renderCreate()}\n//         </div>\n//       </form>\n//     );\n//   }\n// }\n\nexport default reduxForm({\n  form: 'ticketForm',\n  validate\n})(TicketCreateForm);\n"]},"metadata":{},"sourceType":"module"}