{"ast":null,"code":"var _jsxFileName = \"/Users/yingyingxiong/Desktop/groupproject/bigbrothers/src/bigbrothers/components/TicketCreateForm.js\";\n// import React from 'react';\n// import { Field, reduxForm } from 'redux-form';\n// class TicketCreateForm extends React.Component {\n//   renderError({ error, touched }) {\n//     if (touched && error) {\n//       return (\n//         <div className=\"ui error message\">\n//           <div className=\"header\">{error}</div>\n//         </div>\n//       );\n//     }\n//   }\n//   renderInput = ({ input, label, meta }) => {\n//     const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n//     return (\n//       <div className={className}>\n//         <label>{label}</label>\n//         <input {...input} autoComplete=\"off\" />\n//         {this.renderError(meta)}\n//       </div>\n//     );\n//   };\n//   onSubmit = formValues => {\n//     this.props.onSubmit(formValues);\n//   };\n//   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n//         <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n//         <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n//         <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n//         <Field name=\"status\" comonent={this.renderInput} label=\"Enter Status (open, in progress, qa, closed)\" />\n//         <Field name=\"urgent_level\" component={this.renderInput} label=\"Set Urgent Level (low, high, medium)\" />\n//         <Field name=\"budgeted_hours\" component={this.renderInput} label=\"Enter Budgeted Hours\" />\n//         <Field name=\"hours_spent\" component={this.renderInput} label=\"Enter Hours Spent\" />\n//         <Field name=\"project_name\" component={this.renderInput} label=\"Assign a Project\" />\n//         <Field\n//           name=\"create_date\"\n//           component={this.renderInput}\n//           label=\"Enter Create Date (Format: mm/dd/yy)\"\n//         />\n//         <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n//         <button className=\"ui button primary\">Submit</button>\n//       </form>\n//     );\n//   }\n// }\n// const validate = formValues => {\n//   const errors = {};\n//   if (!formValues.ticket_title) {\n//     errors.title = 'You must enter a title for the ticket';\n//   }\n//   if (!formValues.assigned_employee_name) {\n//     errors.description = 'You must assign an employee for this ticket';\n//   }\n//   if(formValues.status !== 'open') {\n//     if (formValues.status !== 'in progress') {\n//       if (formValues.status !== 'qa') {\n//         if (formValues.status !== 'closed') {\n//           errors.description = 'You must enter budgeted hours';\n//         }\n//       }\n//     }\n//   }\n//   if (!formValues.budgeted_hours) {\n//     errors.description = 'You must enter budgeted hours';\n//   }\n//   if (!formValues.create_date) {\n//     errors.description = 'You must enter a create date';\n//   }\n//   if (!formValues.due_date) {\n//     errors.description = 'You must enter a due date';\n//   }\n//   return errors;\n// };\n// export default reduxForm({\n//   form: 'ticketCreateForm',\n//   validate\n// })(TicketCreateForm);\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from \"react-router-dom\";\nimport { Form } from \"semantic-ui-react\";\n\nclass TicketCreateForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  renderCreate() {\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/tickets\",\n      className: \"ui button secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Cancel\"));\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"ticket_title\",\n      component: this.renderInput,\n      label: \"Enter Ticket Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"assigned_employee_name\",\n      component: this.renderInput,\n      label: \"Assign to\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"budgeted_hours\",\n      component: this.renderInput,\n      label: \"Enter Budgeted Hours\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"hours_spent\",\n      component: this.renderInput,\n      label: \"Enter Hours Spent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"status\",\n      component: this.renderInput,\n      label: \"Enter Status (open, in progress, qa, closed)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"urgent_level\",\n      component: this.renderInput,\n      label: \"Set Urgent Level (low, high, medium)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"create_date\",\n      component: this.renderInput,\n      label: \"Enter Create Date (Format: mm/dd/yy)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"due_date\",\n      component: this.renderInput,\n      label: \"Enter Due Date (Format: mm/dd/yy)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"ticket_description\",\n      component: this.renderInput,\n      label: \"Enter Ticket Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"project_name\",\n      component: this.renderInput,\n      label: \"Assign to a Project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Submit\"), this.renderCreate()));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.ticket_title) {\n    errors.description = 'You must enter a ticket title';\n  }\n\n  if (!formValues.assigned_employee_name) {\n    errors.description = 'You must assign the ticket to one employee';\n  }\n\n  if (!formValues.due_date) {\n    errors.description = 'You must enter a due date';\n  }\n\n  if (!formValues.budgeted_hours) {\n    errors.description = 'You must enter Budget Hours';\n  }\n\n  return errors;\n}; //   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n//           <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n//           <Field name=\"project_name\" component={this.renderInput} label=\"Assign Project\" />\n//         </Form.Group>\n//         <Form.Group widths='equal'>\n//           <Field\n//             name=\"create_date\"\n//             component={this.renderInput}\n//             label=\"Enter Create Date (Format: mm/dd/yy)\"\n//           />\n//           <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n//         </Form.Group>\n//         <Form.Group widths='equal'>\n//           <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n//           <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n//         </Form.Group>\n//         <div style={{ display: \"flex\" }}>\n//           <button className=\"ui button primary\">Submit</button>\n//           {this.renderCreate()}\n//         </div>\n//       </form>\n//     );\n//   }\n// }\n\n\nexport default reduxForm({\n  form: 'ticketForm',\n  validate\n})(TicketCreateForm);","map":{"version":3,"sources":["/Users/yingyingxiong/Desktop/groupproject/bigbrothers/src/bigbrothers/components/TicketCreateForm.js"],"names":["React","Field","reduxForm","Link","Form","TicketCreateForm","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","renderCreate","textAlign","render","handleSubmit","display","validate","errors","ticket_title","description","assigned_employee_name","due_date","budgeted_hours","form"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import { Field, reduxForm } from 'redux-form';\n\n// class TicketCreateForm extends React.Component {\n//   renderError({ error, touched }) {\n//     if (touched && error) {\n//       return (\n//         <div className=\"ui error message\">\n//           <div className=\"header\">{error}</div>\n//         </div>\n//       );\n//     }\n//   }\n\n//   renderInput = ({ input, label, meta }) => {\n//     const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n//     return (\n//       <div className={className}>\n//         <label>{label}</label>\n//         <input {...input} autoComplete=\"off\" />\n//         {this.renderError(meta)}\n//       </div>\n//     );\n//   };\n\n//   onSubmit = formValues => {\n//     this.props.onSubmit(formValues);\n//   };\n\n//   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n//         <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n//         <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n//         <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n//         <Field name=\"status\" comonent={this.renderInput} label=\"Enter Status (open, in progress, qa, closed)\" />\n//         <Field name=\"urgent_level\" component={this.renderInput} label=\"Set Urgent Level (low, high, medium)\" />\n//         <Field name=\"budgeted_hours\" component={this.renderInput} label=\"Enter Budgeted Hours\" />\n//         <Field name=\"hours_spent\" component={this.renderInput} label=\"Enter Hours Spent\" />\n//         <Field name=\"project_name\" component={this.renderInput} label=\"Assign a Project\" />\n//         <Field\n//           name=\"create_date\"\n//           component={this.renderInput}\n//           label=\"Enter Create Date (Format: mm/dd/yy)\"\n//         />\n//         <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n//         <button className=\"ui button primary\">Submit</button>\n//       </form>\n//     );\n//   }\n// }\n\n// const validate = formValues => {\n//   const errors = {};\n\n//   if (!formValues.ticket_title) {\n//     errors.title = 'You must enter a title for the ticket';\n//   }\n\n//   if (!formValues.assigned_employee_name) {\n//     errors.description = 'You must assign an employee for this ticket';\n//   }\n\n//   if(formValues.status !== 'open') {\n//     if (formValues.status !== 'in progress') {\n//       if (formValues.status !== 'qa') {\n//         if (formValues.status !== 'closed') {\n//           errors.description = 'You must enter budgeted hours';\n//         }\n//       }\n//     }\n//   }\n\n//   if (!formValues.budgeted_hours) {\n//     errors.description = 'You must enter budgeted hours';\n//   }\n\n//   if (!formValues.create_date) {\n//     errors.description = 'You must enter a create date';\n//   }\n\n//   if (!formValues.due_date) {\n//     errors.description = 'You must enter a due date';\n//   }\n  \n//   return errors;\n// };\n\n// export default reduxForm({\n//   form: 'ticketCreateForm',\n//   validate\n// })(TicketCreateForm);\n\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from \"react-router-dom\";\nimport { Form } from \"semantic-ui-react\";\n\nclass TicketCreateForm extends React.Component {\n  renderError({ error, touched }) {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\"/>\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  renderCreate() {\n    return (\n      <div style={{ textAlign: 'left' }}>\n        <Link to=\"/tickets\" className=\"ui button secondary\">\n          Cancel\n        </Link>\n      </div>\n    )\n  }\n\n  onSubmit = formValues => {\n    this.props.onSubmit(formValues);\n  };\n  render() {\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"ui form error\"\n      >\n        <Form.Group widths='equal'>\n          <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n          <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n        </Form.Group>\n        <Form.Group widths='equal'>\n          <Field name=\"budgeted_hours\" component={this.renderInput} label=\"Enter Budgeted Hours\" />\n          <Field name=\"hours_spent\" component={this.renderInput} label=\"Enter Hours Spent\" />\n        </Form.Group>\n        <Form.Group widths='equal'>\n          <Field name=\"status\" component={this.renderInput} label=\"Enter Status (open, in progress, qa, closed)\" />\n          <Field name=\"urgent_level\" component={this.renderInput} label=\"Set Urgent Level (low, high, medium)\" />\n        </Form.Group>\n        <Form.Group widths='equal'>\n          <Field\n            name=\"create_date\"\n            component={this.renderInput}\n            label=\"Enter Create Date (Format: mm/dd/yy)\"\n          />\n          <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n        </Form.Group>\n        <Form.Group widths='equal'>\n          <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n          <Field name=\"project_name\" component={this.renderInput} label=\"Assign to a Project\" />\n        </Form.Group>\n        \n        <div style={{ display: \"flex\" }}>\n          <button className=\"ui button primary\">Submit</button>\n          {this.renderCreate()}\n        </div>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.ticket_title) {\n    errors.description = 'You must enter a ticket title';\n  }\n\n  if (!formValues.assigned_employee_name) {\n    errors.description = 'You must assign the ticket to one employee';\n  }\n\n  if (!formValues.due_date) {\n    errors.description = 'You must enter a due date';\n  }\n\n  if(!formValues.budgeted_hours) {\n    errors.description = 'You must enter Budget Hours';\n  }\n\n  return errors;\n};\n//   render() {\n//     return (\n//       <form\n//         onSubmit={this.props.handleSubmit(this.onSubmit)}\n//         className=\"ui form error\"\n//       >\n\n//           <Field name=\"ticket_title\" component={this.renderInput} label=\"Enter Ticket Title\" />\n//           <Field name=\"project_name\" component={this.renderInput} label=\"Assign Project\" />\n//         </Form.Group>\n\n//         <Form.Group widths='equal'>\n//           <Field\n//             name=\"create_date\"\n//             component={this.renderInput}\n//             label=\"Enter Create Date (Format: mm/dd/yy)\"\n//           />\n//           <Field name=\"due_date\" component={this.renderInput} label=\"Enter Due Date (Format: mm/dd/yy)\" />\n//         </Form.Group>\n\n//         <Form.Group widths='equal'>\n//           <Field name=\"ticket_description\" component={this.renderInput} label=\"Enter Ticket Description\" />\n//           <Field name=\"assigned_employee_name\" component={this.renderInput} label=\"Assign to\" />\n//         </Form.Group>\n//         <div style={{ display: \"flex\" }}>\n//           <button className=\"ui button primary\">Submit</button>\n//           {this.renderCreate()}\n//         </div>\n//       </form>\n//     );\n//   }\n// }\n\nexport default reduxForm({\n  form: 'ticketForm',\n  validate\n})(TicketCreateForm);\n"]},"metadata":{},"sourceType":"module"}